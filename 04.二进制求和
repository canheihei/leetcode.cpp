//思路:依照竖式相加的规则，从每个数的最后一位开始相加，若大于1则进位即可
class Solution 
{
public:
    string addBinary(string a, string b) 
    {
        int end1=a.size()-1;        //定义字符串a的尾指针
        int end2=b.size()-1;        //定义字符串b的尾指针
        int value1=0,value2=0,next=0;   //定义依次竖式相加的数与进位
        string addret;  //定义返回的答案字符串
        while(end1>=0||end2>=0)     //结束条件为最长的一串遍历完
        {
            if(end1>=0)     //若字符串a没遍历完
            {
                value1=a[end1--]-'0';       //则将字符串数字的该位转换为数字
            }
            else       //若字符串a遍历完了，则将其他与b对应的无数字的位置置为0 
            {
                value1=0;
            }

            if(end2>=0)     //与a同理
            {
                value2=b[end2--]-'0';
            }
            else
            {
                value2=0;
            }

            int sum=value1+value2+next;     //将转换后的数字与进位相加
            if(sum>=2)      //为二进制，故当加到的数大于大于2就要进位
            {
                next=1;
                sum-=2;
            }
            else        //不大于2不需要进位
            {
                next=0;
            }
            addret+=(sum+'0');      //将得到的数尾插到目标字符串
        }
        if(next==1)     //遍历完后若进位还为1.说明最高位相加需要进位
        {
            addret+='1';
        }
        reverse(addret.begin(),addret.end());       //逆置得到的字符串
        return addret;
    }
};
