/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
{
        if(list1==nullptr)
        {
            return list2;
        }
        if(list2==nullptr)
        {
            return list1;
        }
        if(list1==nullptr&&list2==nullptr)
        {
            return nullptr;
        }
        list<int> mylist;
        ListNode* temp=list1;
        while(temp->next!=nullptr)
        {
            temp=temp->next;
        }
        temp->next=list2;
        while(list1)
        {
            mylist.push_back(list1->val);
            list1=list1->next;
        }
        mylist.sort();


        if (mylist.empty()) 
        {
            return nullptr;
        }

        ListNode* head = new ListNode(mylist.front());
        ListNode* current = head;
        mylist.pop_front();

        while (!mylist.empty()) 
        {
            ListNode* newNode = new ListNode(mylist.front());
            current->next = newNode;
            current = current->next;
            mylist.pop_front();
        }

        return head;
    }
};
